---
import { getCollection } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Tag from '../../components/Tag.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<Layout title={post.data.title}>
  <div class="bento-item post-hero">
    <div class="post-hero-inner">
      <h1>{post.data.title}</h1>
      {post.data.tags && post.data.tags.length > 0 && (
        <div class="tags">
          {post.data.tags.map(tag => <Tag tag={tag} />)}
        </div>
      )}
    </div>
  </div>

  <article class="bento-item post-content js-auto-span no-bg">
    <div class="article-grid">
      <aside class="media-column">
        {post.data.images && post.data.images.length > 0 ? (
          <div class="gallery">
            {post.data.images.map(src => (
              <div class="gallery-item">
                <img src={src} alt={post.data.title} />
              </div>
            ))}
          </div>
        ) : (
          post.data.image && (
            <div class="image-container">
              <img src={post.data.image} alt={post.data.title} />
            </div>
          )
        )}
      </aside>

      <section class="content">
        <Content />
      </section>
    </div>
  </article>

  <script>
    (function() {
      function resizeSpan(el) {
        var grid = document.querySelector('.bento-grid');
        if (!grid || !el) return;
        var styles = window.getComputedStyle(grid);
        var rowSize = 80;
        var rowGap = parseFloat(styles.rowGap || styles.gap || 24);
        el.style.gridRowEnd = 'auto';
        var height = el.getBoundingClientRect().height;
        var span = Math.ceil((height + rowGap) / (rowSize + rowGap));
        el.style.gridRowEnd = 'span ' + span;
      }

      function initAutoSpan() {
        var el = document.querySelector('.js-auto-span');
        if (!el) return;
        resizeSpan(el);
        window.addEventListener('resize', function() { resizeSpan(el); });
        el.querySelectorAll('img').forEach(function(img) {
          if (img.complete) return;
          img.addEventListener('load', function() { resizeSpan(el); });
          img.addEventListener('error', function() { resizeSpan(el); });
        });
        var ro = new ResizeObserver(function() { resizeSpan(el); });
        ro.observe(el);
      }

      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initAutoSpan);
      } else {
        initAutoSpan();
      }
    })();
  </script>
</Layout>

<style>
  .no-bg {
    background: transparent !important;
    border: none !important;
    box-shadow: none !important;
    padding: 0 !important;
  }

  .post-hero {
    grid-column: 3 / span 4;
    grid-row: span 1;
    display: flex;
    align-items: center;
  }

  .post-hero-inner {
    display: flex;
    align-items: center;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .post-hero-inner h1 {
    font-size: 2rem;
    margin: 0;
    background: linear-gradient(135deg, var(--accent-color), #2563eb);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    flex: 1 1 auto;
    min-width: 0;
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    justify-content: flex-end;
    flex: 0 0 auto;
    max-width: 60%;
  }

  .post-content {
    grid-column: 1 / -1;
    display: block;
  }

  .article-grid {
    display: grid;
    grid-template-columns: 1fr 2fr;
    gap: 1.5rem;
  }

  .media-column {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .image-container {
    width: 100%;
    overflow: hidden;
    border-radius: 1rem;
  }

  .image-container img {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .image-container:hover img { transform: scale(1.02); }

  .gallery {
    display: grid;
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .gallery-item {
    overflow: hidden;
    border-radius: 1rem;
  }

  .gallery-item img {
    width: 100%;
    height: auto;
    display: block;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .gallery-item:hover img { transform: scale(1.02); }

  .content {
    overflow-wrap: anywhere;
  }

  .content :global(p) {
    font-size: 1.125rem;
    line-height: 1.8;
    opacity: 0.9;
    margin-bottom: 1rem;
  }

  @media (max-width: 900px) {
    .article-grid { grid-template-columns: 1fr; }
    .tags { max-width: 100%; }
  }
</style>